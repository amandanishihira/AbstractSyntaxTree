| `-CompoundStmt 0x557273a82388 <line:13:1, line:24:1>
|   |-DeclStmt 0x557273a81bc0 <line:14:3, col:11>
|   | |-VarDecl 0x557273a81ac0 <col:3, col:7> col:7 used i 'int'
|   | `-VarDecl 0x557273a81b40 <col:3, col:10> col:10 used j 'int'
|   `-ForStmt 0x557273a82350 <line:15:3, line:23:3>
|     |-BinaryOperator 0x557273a81c18 <line:15:8, col:12> 'int' '='
|     | |-DeclRefExpr 0x557273a81bd8 <col:8> 'int' lvalue Var 0x557273a81ac0 'i' 'int'
|     | `-IntegerLiteral 0x557273a81bf8 <col:12> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x557273a81ce8 <col:15, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x557273a81cd0 <col:15> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x557273a81c38 <col:15> 'int' lvalue Var 0x557273a81ac0 'i' 'int'
|     | `-BinaryOperator 0x557273a81cb0 <col:19, col:21> 'int' '-'
|     |   |-ImplicitCastExpr 0x557273a81c98 <col:19> 'int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x557273a81c58 <col:19> 'int' lvalue ParmVar 0x557273a818e0 'n' 'int'
|     |   `-IntegerLiteral 0x557273a81c78 <col:21> 'int' 1
|     |-UnaryOperator 0x557273a81d28 <col:24, col:25> 'int' postfix '++'
|     | `-DeclRefExpr 0x557273a81d08 <col:24> 'int' lvalue Var 0x557273a81ac0 'i' 'int'
|     `-CompoundStmt 0x557273a82338 <line:16:3, line:23:3>
|       `-ForStmt 0x557273a82300 <line:18:5, line:22:5>
|         |-BinaryOperator 0x557273a81d80 <line:18:10, col:14> 'int' '='
|         | |-DeclRefExpr 0x557273a81d40 <col:10> 'int' lvalue Var 0x557273a81b40 'j' 'int'
|         | `-IntegerLiteral 0x557273a81d60 <col:14> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x557273a81ea8 <col:17, col:25> 'int' '<'
|         | |-ImplicitCastExpr 0x557273a81e90 <col:17> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x557273a81da0 <col:17> 'int' lvalue Var 0x557273a81b40 'j' 'int'
|         | `-BinaryOperator 0x557273a81e70 <col:21, col:25> 'int' '-'
|         |   |-BinaryOperator 0x557273a81e30 <col:21, col:23> 'int' '-'
|         |   | |-ImplicitCastExpr 0x557273a81e00 <col:21> 'int' <LValueToRValue>
|         |   | | `-DeclRefExpr 0x557273a81dc0 <col:21> 'int' lvalue ParmVar 0x557273a818e0 'n' 'int'
|         |   | `-ImplicitCastExpr 0x557273a81e18 <col:23> 'int' <LValueToRValue>
|         |   |   `-DeclRefExpr 0x557273a81de0 <col:23> 'int' lvalue Var 0x557273a81ac0 'i' 'int'
|         |   `-IntegerLiteral 0x557273a81e50 <col:25> 'int' 1
|         |-UnaryOperator 0x557273a81ee8 <col:28, col:29> 'int' postfix '++'
|         | `-DeclRefExpr 0x557273a81ec8 <col:28> 'int' lvalue Var 0x557273a81b40 'j' 'int'
|         `-CompoundStmt 0x557273a822e8 <line:19:5, line:22:5>
|           `-IfStmt 0x557273a822d0 <line:20:7, line:21:32>
|             |-BinaryOperator 0x557273a82090 <line:20:11, col:27> 'int' '>'
|             | |-ImplicitCastExpr 0x557273a82060 <col:11, col:16> 'int' <LValueToRValue>
|             | | `-ArraySubscriptExpr 0x557273a81f70 <col:11, col:16> 'int' lvalue
|             | |   |-ImplicitCastExpr 0x557273a81f40 <col:11> 'int *':'int *' <LValueToRValue>
|             | |   | `-DeclRefExpr 0x557273a81f00 <col:11> 'int *':'int *' lvalue ParmVar 0x557273a81860 'arr' 'int *':'int *'
|             | |   `-ImplicitCastExpr 0x557273a81f58 <col:15> 'int' <LValueToRValue>
|             | |     `-DeclRefExpr 0x557273a81f20 <col:15> 'int' lvalue Var 0x557273a81b40 'j' 'int'
|             | `-ImplicitCastExpr 0x557273a82078 <col:20, col:27> 'int' <LValueToRValue>
|             |   `-ArraySubscriptExpr 0x557273a82040 <col:20, col:27> 'int' lvalue
|             |     |-ImplicitCastExpr 0x557273a82028 <col:20> 'int *':'int *' <LValueToRValue>
|             |     | `-DeclRefExpr 0x557273a81f90 <col:20> 'int *':'int *' lvalue ParmVar 0x557273a81860 'arr' 'int *':'int *'
|             |     `-BinaryOperator 0x557273a82008 <col:24, col:26> 'int' '+'
|             |       |-ImplicitCastExpr 0x557273a81ff0 <col:24> 'int' <LValueToRValue>
|             |       | `-DeclRefExpr 0x557273a81fb0 <col:24> 'int' lvalue Var 0x557273a81b40 'j' 'int'
|             |       `-IntegerLiteral 0x557273a81fd0 <col:26> 'int' 1
|             `-CallExpr 0x557273a822a0 <line:21:9, col:32> 'void'
|               |-ImplicitCastExpr 0x557273a82288 <col:9> 'void (*)(int *, int *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x557273a820b0 <col:9> 'void (int *, int *)' Function 0x557273a81480 'swap' 'void (int *, int *)'
|               |-UnaryOperator 0x557273a82160 <col:14, col:20> 'int *' prefix '&' cannot overflow
|               | `-ArraySubscriptExpr 0x557273a82140 <col:15, col:20> 'int' lvalue
|               |   |-ImplicitCastExpr 0x557273a82110 <col:15> 'int *':'int *' <LValueToRValue>
|               |   | `-DeclRefExpr 0x557273a820d0 <col:15> 'int *':'int *' lvalue ParmVar 0x557273a81860 'arr' 'int *':'int *'
|               |   `-ImplicitCastExpr 0x557273a82128 <col:19> 'int' <LValueToRValue>
|               |     `-DeclRefExpr 0x557273a820f0 <col:19> 'int' lvalue Var 0x557273a81b40 'j' 'int'
|               `-UnaryOperator 0x557273a82248 <col:23, col:31> 'int *' prefix '&' cannot overflow
|                 `-ArraySubscriptExpr 0x557273a82228 <col:24, col:31> 'int' lvalue
|                   |-ImplicitCastExpr 0x557273a82210 <col:24> 'int *':'int *' <LValueToRValue>
|                   | `-DeclRefExpr 0x557273a82178 <col:24> 'int *':'int *' lvalue ParmVar 0x557273a81860 'arr' 'int *':'int *'
|                   `-BinaryOperator 0x557273a821f0 <col:28, col:30> 'int' '+'
|                     |-ImplicitCastExpr 0x557273a821d8 <col:28> 'int' <LValueToRValue>
|                     | `-DeclRefExpr 0x557273a82198 <col:28> 'int' lvalue Var 0x557273a81b40 'j' 'int'
|                     `-IntegerLiteral 0x557273a821b8 <col:30> 'int' 1
